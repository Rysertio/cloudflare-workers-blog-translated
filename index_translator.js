/**------【①. Meas and then decide: configuration area】-----**/

'use strict';
const ACCOUNT = {//Account related, higher security

  "user": "admin", //Blog backend user name
  "password": "cfblog-plus", //Blog background password
  "third_token": "cfblog", //Open the token, currently only allows access to /admin/search.xml, available when /admin/sitemap.xml is passed in the cfblog_token header
  "cacheZoneId":"935xxxxxxxxxxxx",//Zone ID
  "cacheToken":"AQxxxxxxxx",//API token

  "kv_var": this['CFBLOG'],//The variable name used when workers bind kv
}

const OPT = {//Website configuration

  /*--Foreground parameters--*/
  "siteDomain": "domain name",// domain name (without https or /)
  "siteName": "CFBLOG-Plus",//blog name
  "siteDescription":"CFBLOG-Plus" ,//blog description
  "keyWords":"cloudflare,KV,workers,blog",//keyword
  "logo":"https://cdn.jsdelivr.net/gh/Arronlong/cfblog-plus@master/themes/JustNews/files/logo2.png",//JustNews theme logo

  "theme_github_path":"https://raw.githubusercontent.com/Rysertio/cloudflare-workers-blog-translated/main/themes/",//theme path
  "themeURL": "https://raw.githubusercontent.com/Rysertio/cloudflare-workers-blog-translated/main/themes/lite/", // template address, ending with "/""
  //"search_xml_url":"", //search.xml external link, which can be automatically generated by github action, if not set, it will be generated in real time
  //"sitemap_xml_url":"", //sitemap.xml external link, which can be automatically generated by the action of github, or generated in real time if it is not set

  "pageSize": 5,//Number of articles per page
  "recentlySize": 6,//Number of recent articles
  "recentlyType": 1,//Recent article type: 1- Sort by creation time in reverse order (reverse by id), 2- Sort by modification time
  "readMoreLength": 150,//Read more interception length
  "cacheTime": 60*60*24*2, //The cache time of the article in the browser (seconds), suggestion = article update frequency
  "html404": `<b>404</b>`,//404 page code
  "codeBeforHead":`
  <script src="https://cdn.staticfile.org/jquery/2.2.4/jquery.min.js"></script>
  `,//Other codes, displayed before </head>
  "codeBeforBody":`
  `,//Other codes, displayed before </body>
  "commentCode":`
  <script>
    //Article browsing page add edit direct function
    $(".entry-info").append('<a style="float:right;margin-left:5px;" href="'+location.href.replace('/article/','/admin/ edit/')+'" target="_blank">Edit</a>')
  </script>
  `,//Comment area code
  "widgetOther":`
  `,//20201224 new parameters for the right widget extension
  "otherCodeA": `hot degree`,//other custom variables for template development
  "otherCodeB":``,//
  "otherCodeC":``,//
  "otherCodeD":``,//
  "otherCodeE":``,//
  "copyRight" :`Powered by <a href="https://www.cloudflare.com">Cloudflare</a> & <a href="https://blog.arrontg.cf">CFBlog-Plus</a a> & <a href="https://blog.gezhong.vip">CF-Blog </a>`,//Customize the copyright information, it is recommended to keep the link between the unselfish Coudflare and the author
  "robots":`User-agent: *
Disallow: /admin`,//robots.txt settings
/*--Foreground and background shared parameters--*/

  "top_flag":`<topflag>[topflag]</topflag>`,//top flag
  "top_flag_style":`<style>topflag {color:#ff5722}</style>`,//Top flag style


  /*--Background parameters--*/

  "hidden_flag":`<hiddenflag>[hidden]</hiddenflag>`,//Hidden flag
  "hidden_flag_style":`<style>hiddenflag {color:#000000;background-color: #ffff00;}</style>`,//Hidden flag style

  "admin_home_idx": 1, //Background homepage tab index setting: 1-My article, 2-New, 3-Setting, 4-Release
  "editor_page_scripts": `
    //Top setting
    let top_setting=\`
      <div class="form-group">
      <label for="exampleInputEmail2">Whether to top</label>
      <input type="hidden" class="form-control" id="top_timestamp" name="top_timestamp">
      <select class="form-control" id="istop" name="istop">
        <option value="0" selected >No</option>
        <option value="1" >Yes</option>
      </select>
      </div>\`
    $('form#addNewForm div.form-group,form#editForm div.form-group').last().after(top_setting);//New and edit pages to add top settings
    $("#istop").change(function(){
      $("#top_timestamp").val($(this).val()*1?new Date().getTime():0);
    });
    if(location.pathname.startsWith('/admin/edit')){//Modify the article page, automatically set the top
      $("#istop").val(articleJson.top_timestamp?1:0);
      $("#top_timestamp").val(articleJson.top_timestamp?articleJson.top_timestamp:0);
    }
    $("#istop").trigger('change')
    //Hide settings
    let hidden_setting=\`
      <div class="form-group">
      <label for="exampleInputEmail2">whether to hide</label>
      <select class="form-control" id="hidden" name="hidden">
        <option value="0" selected >No</option>
        <option value="1" >Yes</option>
      </select>
      </div>\`
    $('form#addNewForm div.form-group,form#editForm div.form-group').last().after(hidden_setting);//Add hidden settings for new and edit pages
    if(location.pathname.startsWith('/admin/edit')){//Modify the article page, automatically set to hide
      $("#hidden").val(articleJson.hidden?1:0);
    }
    let sitemapxml=\`<a tabindex="0" role="button" type="submit" id="btn_export" class="btn btn-default" href="/admin/sitemap.xml" >export sitemap.xml </a>\`
    $('form#importForm a').last().after(sitemapxml);//Add the export sitemap.xml export button on the settings page
    let searchxml=\`<a tabindex="0" role="button" type="submit" id="btn_export" class="btn btn-default" href="/admin/search.xml" >export search.xml </a>\`
    $('form#importForm a').last().after(searchxml);//Add the export search.xml export button on the settings page

    //Turn off email matching and @ matching, otherwise the image will use the cdn of jsdelivr, if there is a version number, it will be matched to "mailto:xxx", resulting in abnormal display
    mdEditor.settings.emailLink=false;
    mdEditor.settings.atLink=false;

    //mdEditor.settings.toc=false
    //mdEditor.settings.tocm=true // Using [TOCM]
    //mdEditor.settings.tocContainer="#custom-toc-container" // Custom ToC container layer
    //mdEditor.settings.gfm=false
    //mdEditor.settings.tocDropdown=true
    //mdEditor.settings.markdownSourceCode=true // Whether to keep the Markdown source code, that is, whether to delete the Textarea tag that saves the source code
    mdEditor.settings.emoji=true
    mdEditor.settings.taskList=true;// No resolution by default
    mdEditor.settings.tex=true;// No resolution by default
    mdEditor.settings.flowChart=true; // No parsing by default
    mdEditor.settings.sequenceDiagram=true;// No resolution by default

    //Enable global html tag parsing-not recommended
    //mdEditor.settings.htmlDecode=true;

    window.mdEditor=mdEditor;
    //Add html tag parsing switch on the editormd toolbar
    mdEditor.getToolbarHandles().parseHtml=function(){
      let ele = $(".editormd-menu li a i:last");
      if(ele.hasClass('fa-toggle-off')){
        ele.removeClass('fa-toggle-off').addClass('fa-toggle-on');
        mdEditor.settings.htmlDecode = true;
      }else if(ele.hasClass('fa-toggle-on')){
        ele.removeClass('fa-toggle-on').addClass('fa-toggle-off')
        mdEditor.settings.htmlDecode = false;
      }
      mdEditor.setMarkdown(mdEditor.getMarkdown());
    }
    setTimeout(function(){
      $(".editormd-menu").append('<li class="divider" unselectable="on">|</li><li><a href="javascript:;" title="Parse HTML tags" unselectable="on"><i class="fa fa-toggle-off" name="parseHtml" unselectable="on"> Parse HTML tags</i></a></li>')
      mdEditor.setToolbarHandler(mdEditor.getToolbarHandles())
    },300)

    //Default image, tool: https://tool.lu/imageholder/
    if($('#img').val()=="")$('#img').val('https://cdn.jsdelivr.net/gh/Arronlong/cdn@master/cfblog/cfblog -plus.png');
    //The default time is set to the current time
    if($('#createDate').val()=="")$('#createDate').val(new Date(new Date().getTime()+8*60*60*1000).toJSON ().substr(0,16));
    `, //Backend edit page script

};

//---Processing part of the configuration---
{
  //CFBLOG general variable
  this.CFBLOG = ACCOUNT.kv_var;

  //The default is a non-private blog
  if(null==OPT.privateBlog){
    OPT.privateBlog=false;
  }
  //Processing themeURL, theme_github_path parameter settings
  if(OPT.themeURL.substr(-1)!='/'){
    OPT.themeURL=OPT.themeURL+'/';
  }
  if(OPT.theme_github_path.substr(-1)!='/'){
    OPT.theme_github_path=OPT.theme_github_path+'/';
  }
  //For the front desk style, it can be combined with codeBeforHead
  if(OPT.top_flag_style){
  OPT.codeBeforHead += OPT.top_flag_style
  }
}

/**------【②. Hunting moment: request processing entrance】-----**/

//Monitor request
addEventListener("fetch",event=>{
  //Process the request
  event.respondWith(handlerRequest(event))
})

// Process the request
async function handlerRequest(event){
  let request = event.request
  //Get URL request object
  let url=new URL(request.url)
  let paths=url.pathname.trim("/").split("/")

  //Verify permissions

  if(("admin"==paths[0]||true===OPT.privateBlog) &&!parseBasicAuth(request)){
     return new Response("Unauthorized",{
       headers:{
         "WWW-Authenticate":'Basic realm="cfblog"',
         "Access-Control-Allow-Origin":"*"
       },
       status:401
     });
   }

   //Assemble the request url, check if there is a cache
   const D=caches.default,
      M="https://"+OPT.siteDomain+url.pathname,
      x=new Request(M, request);
  console.log("cacheFullPath:",M);
  let k=await D.match(x);
  if(k){
    console.log("hit cache!")
    return k;
  }

  switch(paths[0]){
    case "favicon.ico": //icon
      k = await handle_favicon(request);
      break;
    case "robots.txt":
      k = await handle_robots(request);
      break;
    case "sitemap.xml":
      k = await handle_sitemap(request);
      break;
    case "search.xml":
      k = await handle_search(request);
      break;
    case "admin": //Background
      k = await handle_admin(request);
      break;
    case "article": //Article content page
      k = await handle_article(paths[1]);
      break;
    case "": //Article Home
    case "page": //Article pagination
    case "category": //category pagination
    case "tags": //tags pagination
      k = await renderBlog(url);
      break;
    default:
      //Other pages return 404
      k = new Response(OPT.html404,{
        headers:{
          "content-type":"text/html;charset=UTF-8"
        },
        status:200
      })
      break;
  }
  //Set the browser cache time: do not cache in the background, only cache in the foreground
  try{
    if("admin"==paths[0]){
      k.headers.set("Cache-Control","no-store")
    }else{
      k.headers.set("Cache-Control","public, max-age="+OPT.cacheTime),
      event.waitUntil(D.put(M,k.clone()))
    }
  }catch(e){}

  return k
}

/**------【③. Divide and conquer: various requests are handled separately】-----**/

//Visit: favicon.ico
async function handle_favicon(request){
  /*
  If you want to customize or use the specified ico, you can set this request to 404 and add similar code in codeBeforHead:
    <link rel="icon" type="image/x-icon" href="https://cdn.jsdelivr.net/gh/gdtool/zhaopp/cfblog/favicon.ico" />
    <link rel="Shortcut Icon" href="https://cdn.jsdelivr.net/gh/gdtool/zhaopp/cfblog/favicon.ico">
  */
  /*
  return new Response("404",{
      headers:{
          "content-type":"text/plain;charset=UTF-8"
      },
      status:404
  });
  */
  let url = new URL(request.url)
  url.host="dash.cloudflare.com"
  return await fetch(new Request(url, request));
}

//Access: robots.txt
async function handle_robots(request){
  return new Response(OPT.robots+"\nSitemap: https://"+OPT.siteDomain+"/sitemap.xml",{
    headers:{
      "content-type":"text/plain;charset=UTF-8"
    },
    status:200
  });
}

//Access: sitemap.xml
async function handle_sitemap(request){
  //If the parameter is set, the url specified by the parameter is used
  //You can use the github action method to automatically update regularly
  let xml;
  if(OPT.sitemap_xml_url){

    //cf proxy mode, speed is possible, real-time performance is better
    let url = new URL(request.url)
    url.href = OPT.sitemap_xml_url.replace('cdn.jsdelivr.net/gh','raw.githubusercontent.com').replace('@','/');
    xml = await fetch(new Request(url, request));
    xml = await xml.text();

    ////302 method, if jsdelivr is used as the cdn, the speed is fast, but the update is delayed
    //return new Response("",{
    // headers:{
    // "location":OPT.sitemap_xml_url
    // },
    // status:302
    //});

  }else{ //If the parameter is not configured, the structure will be obtained in real time

    //Read the list of articles and assemble them in a specific xml format
    let articles_all=await getArticlesList()
    xml='<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas/ sitemap/0.9">';
    for(var i=0;i<articles_all.length;i++){
      xml+="\n\t<url>",
      xml+="\n\t\t<loc>https://"+OPT.siteDomain+"/article/"+articles_all[i].id+"/"+articles_all[i].link+".html</loc> ",
      xml+="\n\t\t<lastmod>"+articles_all[i].createDate.substr(0,10)+"</lastmod>",
      xml+="\n\t\t<changefreq>"+(void 0===articles_all[i].changefreq?"daily":articles_all[i].changefreq)+"</changefreq>",
      xml+="\n\t\t<priority>"+(void 0===articles_all[i].priority?"0.5":articles_all[i].priority)+"</priority>",
      xml+="\n\t</url>";
    }
    xml+="\n</urlset>"
  }
  return new Response(xml,{
    headers:{
        "content-type":"text/xml;charset=UTF-8"
    },
    status:200
  });
}

//Access: search.xml
async function handle_search(request){
  //If the parameter is set, the url specified by the parameter is used
  //You can use the github action method to automatically update regularly
  let xml;
  if(OPT.search_xml_url){

    //cf proxy mode, speed is possible, real-time performance is better
    let url = new URL(request.url)
    url.href = OPT.search_xml_url.replace('cdn.jsdelivr.net/gh','raw.githubusercontent.com').replace('@','/');
    xml = await fetch(new Request(url, request));
    xml = await xml.text();

    ////302 method, if jsdelivr is used as the cdn, the speed is fast, but the update is delayed
    //return new Response("",{
    // headers:{
    // "location":OPT.search_xml_url
    // },
    // status:302
    //});

  }else{ //If the parameter is not configured, the structure will be obtained in real time

    //Read the list of articles and assemble them according to the specific xml format
    let articles_all=await getArticlesList()
    xml='<?xml version="1.0" encoding="UTF-8"?>\n<blogs>';
    for(var i=0;i<articles_all.length;i++){
      xml+="\n\t<blog>",
      xml+="\n\t\t<title>"+articles_all[i].title+"</title>";
      let article = await getArticle(articles_all[i].id);
      if(null != article){
        xml+="\n\t\t<content>"+article.contentMD.replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('&','&amp ;')+"</content>"
      }
      xml+="\n\t\t<url>https://"+OPT.siteDomain+"/article/"+articles_all[i].id+"/"+articles_all[i].link+".html</url>",
      xml+="\n\t\t<time>"+articles_all[i].createDate.substr(0,10)+"</time>",
      xml+="\n\t</blog>";
    }
    xml+="\n</blogs>"
  }
  return new Response(xml,{
    headers:{
      "content-type":"text/xml;charset=UTF-8"
    },
    status:200
  });
}

//Render front-end blog: Specify the first-level path page\tags\category, the second-level path value, and page number, the default is the first page
async function renderBlog(url){
  console.log("---Enter the renderBlog function---, path=", url.href.substr(url.origin.length))

  //Process theme preview and paging
  let theme=url.searchParams.get("theme"),
      pageSize=url.searchParams.get("pageSize");
  if(theme){
    OPT.themeURL=OPT.theme_github_path+theme+"/";
  }
  if(pageSize){
    OPT.pageSize=parseInt(pageSize);
  }
  //If the default default theme is used, load the default2.0 theme instead
  if(OPT.theme_github_path+"default/"==OPT.themeURL){
    OPT.themeURL=OPT.theme_github_path+"default2.0/";
  }
  console.log("theme pageSize",OPT.pageSize,OPT.themeURL)

  //Get the homepage template source code
  let theme_html=await getThemeHtml("index"),
      //Read configuration information such as navigation bar, category directory, tags, links, all articles, recent articles in KV
      menus=await getWidgetMenu(),
      categories=await getWidgetCategory(),
      tags=await getWidgetTags(),
      links=await getWidgetLink(),
      articles_all=await getArticlesList(),
      articles_recently=await getRecentlyArticles(articles_all);

  /** Front desk blog
   * Path format:
   * Domain name / article list homepage, equivalent to domain name /page/1
   * Domain name /page/xxx Turn page of article list
   *
   * Domain name /category/xxx category page, equivalent to domain name /category/xxx/page/1
   * Domain name /category/xxx/page/xxx category page + page turn
   *
   * The domain name /tags/xxx tab page is equivalent to the domain name /tags/xxx/page/1
   * Domain name /tags/xxx/page/xxx category page + page turn
   *
   */
  let paths = url.pathname.trim("/").split("/")
  let articles=[],
      pageNo=1
  //Get a list of articles
  switch(paths[0]||"page"){
  case "page":
    articles = articles_all
    pageNo = paths[1]||1
    break;
  case "tags":
  case "category":
    let category_tag = paths.slice(1).join("");//If there is no paging, tags and categories are followed by tags and category names
    if(paths.length>3 && paths.includes("page")){
      pageNo = paths[paths.indexOf("page")+1] //page number of paging
      category_tag = paths.slice(1, paths.lastIndexOf("page")-1).join("") //After tags and categories, the ones before paging are the tags and category names
    }
    category_tag = decodeURIComponent(category_tag)
    articles = articles_all.filter(a => a[paths[0]].includes(category_tag))
    break;
  }
  pageNo = parseInt(pageNo)
  // console.log(pageNo)
  // console.log(articles)

  //Get the list of articles to be displayed on the page
  let articles_show = articles.slice((pageNo-1)*OPT.pageSize,pageNo*OPT.pageSize);
  // console.log(articles_show)

  //Process article attributes (year, month, day, url, etc.)
  processArticleProp(articles_show);

  // console.log(url.pathname)
  let url_prefix = url.pathname.replace(/(.*)\/page\/\d+/,'$1/')
  if(url_prefix.substr(-1)=='/'){
    url_prefix=url_prefix.substr(0,url_prefix.length-1);
  }
  // console.log(url_prefix)
  //Assemble various parameters
  let newer=[{title:"Previous page",url:url_prefix+"/page/"+(pageNo-1)}];
  if(1==pageNo){
    newer=[];
  }
  let older=[{title:"Next page",url:url_prefix+"/page/"+(pageNo+1)}];
  if(pageNo*OPT.pageSize>=articles.length){
    older=[];
  }
  // console.log(newer)
  // console.log(older)

  //Article title, keywords
  let title=(pageNo>1? "page "+pageNo+"-": "")+OPT.siteName,
      keyWord=OPT.keyWords,
      cfg={};
  cfg.widgetMenuList=menus,//Navigation
  cfg.widgetCategoryList=categories,//Category list
  cfg.widgetTagsList=tags,//tags
  cfg.widgetLinkList=links,//link
  cfg.widgetRecentlyList=articles_recently,//Recent articles
  cfg.articleList=articles_show,//The current page article list
  cfg.pageNewer=newer,//page up link
  cfg.pageOlder=older,//page down link
  cfg.title=title,//Web page title
  cfg.keyWords=keyWord;//SEO keywords

  //Use mustache.js for page rendering (parameter replacement)
  cfg.OPT=OPT

  let html = Mustache.render(theme_html,cfg)

  return new Response(html,{
    headers:{
      "content-type":"text/html;charset=UTF-8"
    },
    status:200
  })
}

//Render the article content page of the front-end blog
async function handle_article(id){
  //Get the content page template source code
  let theme_html=await getThemeHtml("article"),
      //Read configuration information such as navigation bar, category directory, tags, links, recent articles, etc. in KV
      menus=await getWidgetMenu(),
      categories=await getWidgetCategory(),
      tags=await getWidgetTags(),
      links=await getWidgetLink(),
      articles_recently=await getRecentlyArticles();

  //Get the previous, this, and next articles
  let articles_sibling=await getSiblingArticle(id);

  //Process article attributes (year, month, day, url, etc.)
  processArticleProp(articles_sibling);

  //Get this article
  let article=articles_sibling[1];

  //Assemble the parameters of the article details page
  let title=article.title.replace(nullToEmpty(OPT.top_flag),'').replace(nullToEmpty(OPT.hidden_flag),'')+"-"+OPT.siteName,
      keyWord=article.tags.concat(article.category).join(","),
      cfg={};
  cfg.widgetMenuList=menus,//Navigation
  cfg.widgetCategoryList=categories,//Category list
  cfg.widgetTagsList=tags,//tags
  cfg.widgetLinkList=links,//link
  cfg.widgetRecentlyList=articles_recently,//Recent articles
  cfg.articleOlder=articles_sibling[0]?[articles_sibling[0]]:[],//Previous article
  cfg.articleSingle=article,//this article
  cfg.articleNewer=articles_sibling[2]?[articles_sibling[2]]:[],//Next article
  cfg.title=title,//Web page title
  cfg.keyWords=keyWord;//SEO keywords

  //Use mustache.js to render the page (parameter replacement)
  cfg.OPT=OPT

  let html = Mustache.render(theme_html,cfg)

  //Return in html format
  return new Response(html,{
    headers:{
      "content-type":"text/html;charset=UTF-8"
    },
    status:200
  })
}

//Background request processing
async function handle_admin(request){
  let url = new URL(request.url),
      paths = url.pathname.trim("/").split("/"),
      html,//return html
      json,//return json
      file;//Return to file
  //New page
  if(1==paths.length||"list"==paths[1]){
    //Read the admin/index.html source code of the theme
    let theme_html=await getThemeHtml("admin/index"),
        //Read configuration information such as navigation bar, category directory, links, recent articles, etc. in KV
        categoryJson=await getWidgetCategory(),
        menuJson=await getWidgetMenu(),
        linkJson=await getWidgetLink();

    //Manually replace the parameters in the format of <!--{xxx}-->
    html = theme_html.replaceHtmlPara("categoryJson",JSON.stringify(categoryJson))
                    .replaceHtmlPara("menuJson",JSON.stringify(menuJson))
                    .replaceHtmlPara("linkJson",JSON.stringify(linkJson))

    //Add background home page configuration
    if(OPT.admin_home_idx && OPT.admin_home_idx>=1 && OPT.admin_home_idx<=4){
      html = html.replace("$('#myTab li:eq(0) 1').tab('show')","$($('#myTab a[href*=\"'+location.hash+ '\"]')[0]||$('#myTab a:eq("+OPT.admin_home_idx+")')).tab('show')")
    }
    //Add sticky style
    if(OPT.top_flag_style){
      html += OPT.top_flag_style
    }
    //Add hidden style
    if(OPT.hidden_flag_style){
      html += OPT.hidden_flag_style
    }
  }

  //release
  if("publish"==paths[1]){
    //Get the list of articles in KV
    let articles_all=await getAllArticlesList(),
        tags=[]; //Operation tags

    //Traverse all articles and gather all tags
    for(var i=0;i<articles_all.length;i++){
      //If the article has a label
      if("object"==typeof articles_all[i].tags){
        //Store all tags in e
        for(var j=0;j<articles_all[i].tags.length;j++){
          if(articles_all[i].tags[j]
            && articles_all[i].tags[j].length>0
            && -1==tags.indexOf(articles_all[i].tags[j])){
            tags.push(articles_all[i].tags[j]);
          }
        }
      }
    }
    console.log(articles_all)
    //Write all tags into KV at one time and clear the cache
    await saveWidgetTags(JSON.stringify(tags))

    json = await purge()?'{"msg":"published ,purge Cache true","rst":true}':'{"msg":"published ,buuuuuuuuuuuut purge Cache false !!!!!!", "rst":true}'

  }

  //Article list
  if("getList"==paths[1]){
    //Fetch the first page by default, 20 articles per page
    let pageNo=(undefined===paths[2])? 1: parseInt(paths[2]),
        list=await admin_nextPage(pageNo, 20);//load 20 each time
    json = JSON.stringify(list)
  }

  //modify articles
  if("edit"==paths[1]){
    let id=paths[2],
        //Get the theme admin/edit source code
        theme_html=await getThemeHtml("admin/edit"),
        //Read classification in KV
        categoryJson=JSON.stringify(await getWidgetCategory()),
        //Read the content of the article in KV
        articleJson=JSON.stringify(await getArticle(id));

    //Manually replace the parameters in the format of <!--{xxx}-->
    html = theme_html.replaceHtmlPara("categoryJson",categoryJson).replaceHtmlPara("articleJson",articleJson.replaceAll("script>","script＞"))
  }

  //Save configuration
  if("saveConfig"==paths[1]){
    const ret=await parseReq(request);
    let widgetCategory=ret.WidgetCategory,//Category
        widgetMenu=ret.WidgetMenu,//Navigation
        widgetLink=ret.WidgetLink;//Link

    //Judgment format, write classification, navigation, link to KV
    if(checkFormat(widgetCategory) && checkFormat(widgetMenu) && checkFormat(widgetLink)){
      let success = await saveWidgetCategory(widgetCategory)
      success = success && await saveWidgetMenu(widgetMenu)
      success = success && await saveWidgetLink(widgetLink)
      json = success?'{"msg":"saved","rst":true}':'{"msg":"Save Faild!!!","ret":false}'
    }else{
      json ='{"msg":"Not a JSON object","rst":false}'
    }
  }

  //Import
  if("import"==paths[1]){
    let importJsone=(await parseReq(request)).importJson;
    console.log("Start import",typeof importJson)

    if(checkFormat(importJson)){
      let importJson=JSON.parse(importJson),
          keys=Object.keys(importJson);
      for(let i=0;i<keys.length;++i){
        console.log(keys[i],importJson[keys[i]]),
        await saveArticle(keys[i],importJson[keys[i]]);
      }
      json ='{"msg":"import success!","rst":true}'
    }else{
      json ='{"msg":" importJson Not a JSON object","rst":false}'
    }
  }

  //Export
  if("export"===paths[1]){
    console.log("Start exporting");
    async function exportArticle(arr=[],cursor="",limit=1){
      //Paging to get the content of the article
      const list=await CFBLOG.list({limit:limit,cursor:cursor});
      if(!1 in list) return {};
      arr=arr.concat(list.keys)
      console.log("Export: ",typeof list, JSON.stringify(list))
      //Determine whether the export is complete
      if(list.list_complete){
        let ret = {OPT:OPT};
        for(let i=0;i<arr.length;++i){
          const article = await CFBLOG.get(arr[i].name);
          if(null != article){
            ret[arr[i].name] = checkFormat(article)?JSON.parse(article):article
          }
        }
        return ret
      }
      return await exportArticle(arr,list.cursor,limit)
    }

    let articles=await exportArticle();
    file = {
      name: "cfblog-"+new Date().getTime()+".json",
      content: JSON.stringify(articles)
    }
  }//Export search.xml
  if("search.xml"===paths[1]){
    console.log("Start exporting");
    //Read the list of articles and assemble them according to the specific xml format
    let articles_all=await getArticlesList()
    let xml='<?xml version="1.0" encoding="UTF-8"?>\n<blogs>';
    for(var i=0;i<articles_all.length;i++){
      xml+="\n\t<blog>",
      xml+="\n\t\t<title>"+articles_all[i].title+"</title>";
      let article = await getArticle(articles_all[i].id);
      if(null != article){
        xml+="\n\t\t<content>"+article.contentMD.replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('&','&amp ;')+"</content>"
      }
      xml+="\n\t\t<url>https://"+OPT.siteDomain+"/article/"+articles_all[i].id+"/"+articles_all[i].link+".html</url> ",
      xml+="\n\t\t<time>"+articles_all[i].createDate.substr(0,10)+"</time>",
      xml+="\n\t</blog>";
    }
    xml+="\n</blogs>"
    file = {
      name: "search.xml",
      content: xml
    }
  }

  //Export sitemap.xml
  if("sitemap.xml"===paths[1]){
    console.log("Start exporting");
    //Read the list of articles and assemble them according to the specific xml format
    let articles_all=await getArticlesList()
    let xml='<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation= "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas /sitemap/0.9">';
    for(var i=0;i<articles_all.length;i++){
      xml+="\n\t<url>",
      xml+="\n\t\t<loc>https://"+OPT.siteDomain+"/article/"+articles_all[i].id+"/"+articles_all[i].link+".html</loc> ",
      xml+="\n\t\t<lastmod>"+articles_all[i].createDate.substr(0,10)+"</lastmod>",
      xml+="\n\t\t<changefreq>"+(void 0===articles_all[i].changefreq?"daily":articles_all[i].changefreq)+"</changefreq>",
      xml+="\n\t\t<priority>"+(void 0===articles_all[i].priority?"0.5":articles_all[i].priority)+"</priority>",
      xml+="\n\t</url>";
    }
    xml+="\n</urlset>"
    file = {
      name: "sitemap.xml",
      content: xml
    }
  }

  //New article
  if("saveAddNew"==paths[1]){
    const ret=await parseReq(request);
    let title=ret.title,//Article title
        img=ret.img,//illustration
        link=ret.link,//Permanent link
        createDate=ret.createDate.replace('T',''),//release date
        category=ret.category,//category
        tags=ret.tags,//tags
        priority=void 0===ret.priority?"0.5":ret.priority,//weight
        changefreq=void 0===ret.changefreq?"daily":ret.changefreq,//Update frequency
        contentMD=ret["content-markdown-doc"],//article content-md format
        contentHtml=ret["content-html-code"],//article content-html format
        contentText="",//Article summary
        top_timestamp=ret.top_timestamp*1,//Top timestamp, 0 when not top
        modify_timestamp=new Date().getTime()+8*60*60*1000,//Modify the timestamp
        hidden=ret.hidden*1,//whether to hide
        id="";//Article id

    //Verify the integrity of the parameters
    if(title.length>0
      && createDate.length>0
      && category.length>0
      && contentMD.length>0
      && contentHtml.length>0){

      id=await generateId(),
      contentText=contentHtml.replace(/<\/?[^>]*>/g,"").trim().substring(0,OPT.readMoreLength);//Summary
      //Assemble article json
      let article={
        id:id,
        title:title,
        img:img,
        link:link,
        createDate:createDate,
        category:category,
        tags:tags,
        contentMD:contentMD,
        contentHtml:contentHtml,
        contentText:contentText,
        priority:priority,
        top_timestamp:top_timestamp,
        modify_timestamp:modify_timestamp,
        hidden:hidden,
        changefreq:changefreq
      };

      //Write article json into KV (key is article id, value is article json string)
      await saveArticle(id,JSON.stringify(article));

      //Assemble article json
      let articleWithoutHtml={
        id:id,
        title:title,
        img:img,
        link:link,
        createDate:createDate,
        category:category,
        tags:tags,
        contentText:contentText,
        priority:priority,
        top_timestamp:top_timestamp,
        modify_timestamp:modify_timestamp,
        hidden:hidden,
        changefreq:changefreq
      },
      articles_all_old=await getAllArticlesList(),//Read the list of articles
      articles_all=[];

      //Write the latest article into the article list, sort by id, and write it back to KV again
      articles_all.push(articleWithoutHtml),
      articles_all=articles_all.concat(articles_all_old),
      articles_all=sortArticle(articles_all),
      await saveArticlesList(JSON.stringify(articles_all))

      json ='{"msg":"added OK","rst":true,"id":"'+id+'"}'
    }else{
      json ='{"msg":"Incomplete information","rst":false}'
    }
  }

  //delete
  if("delete"==paths[1]){
    let id=paths[2]
    if(6==id.length){
      await CFBLOG.delete(id);
      let e=await getAllArticlesList();
      for(r=0;r<e.length;r++){
        if(id==e[r].id){
          e.splice(r,1);

          await saveArticlesList(JSON.stringify(e))
          json ='{"msg":"Delete ('+id+') OK","rst":true,"id":"'+id+'"}'
          break;
        }
      }
    }else{
      json ='{"msg":"Delete false ","rst":false,"id":"'+id+'"}'
    }
  }

  //Save the edited article
  if("saveEdit"==paths[1]){
    const ret=await parseReq(request);
    let title=ret.title,//Article title
        img=ret.img,//illustration
        link=ret.link,//Permanent link
        createDate=ret.createDate.replace('T',''),//release date
        category=ret.category,//category
        tags=ret.tags,//tags
        priority=void 0===ret.priority?"0.5":ret.priority,//weight
        changefreq=void 0===ret.changefreq?"daily":ret.changefreq,//Update frequency
        contentMD=ret["content-markdown-doc"],//article content-md format
        contentHtml=ret["content-html-code"],//article content-html format
        contentText="",//Article summary
        top_timestamp=ret.top_timestamp*1,//Set the timestamp if you stick to the top, and 0 if it is not on the top
        modify_timestamp=new Date().getTime()+8*60*60*1000,//Modify the timestamp
        hidden=ret.hidden*1,//whether to hide
        id=ret.id;//Article id

    //Verify the integrity of the parameters
    if(title.length>0
      && createDate.length>0
      && category.length>0
      && contentMD.length>0
      && contentHtml.length>0){

      contentText=contentHtml.replace(/<\/?[^>]*>/g,"").trim().substring(0,OPT.readMoreLength);//Summary
      //Assemble article json
      let article={
        id:id,
        title:title,
        img:img,
        link:link,
        createDate:createDate,
        category:category,
        tags:tags,
        contentMD:contentMD,
        contentHtml:contentHtml,
        contentText:contentText,
        priority:priority,
        top_timestamp:top_timestamp,
        modify_timestamp:modify_timestamp,
        hidden:hidden,
        changefreq:changefreq
      };

      //Write article json into KV (key is article id, value is article json string)
      await saveArticle(id,JSON.stringify(article));

      //Assemble article json
      let articleWithoutHtml={
        id:id,
        title:title,
        img:img,
        link:link,
        createDate:createDate,
        category:category,
        tags:tags,
        contentText:contentText,
        priority:priority,
        top_timestamp:top_timestamp,
        modify_timestamp:modify_timestamp,
        hidden:hidden,
        changefreq:changefreq
      },
      articles_all=await getAllArticlesList();//Read the list of articles
      //console.log(articles_all)
      //Delete the original object, add the latest article to the article list, and re-sort by id, then write it back to KV again
      for(var i=articles_all.length-1;i>=0;i--){//Delete by index, reverse order, otherwise the index value will change
        if(articles_all[i].id == id){
          articles_all.splice(i,1);
          break;
        }
      }
      articles_all.push(articleWithoutHtml),
      articles_all=sortArticle(articles_all),
      await saveArticlesList(JSON.stringify(articles_all))
      json ='{"msg":"Edit OK","rst":true,"id":"'+id+'"}'
    }else{
      json ='{"msg":"Incomplete information","rst":false}'
    }
  }

  //Return result
  if(!json &&!html && !file){
    json ='{"msg":"some errors","rst":false}'
  }
  if(file){
    return new Response(file.content,{
      headers:{
        "content-type":"application/octet-stream;charset=utf-8",
        "Content-Disposition":"attachment; filename="+file.name
      },
      status:200
    })
  }
  if(html){
    return new Response(html,{
      headers:{
        "content-type":"text/html;charset=UTF-8"
      },
      status:200
    })
  }
  if(json){
    return new Response(json ,{
      headers:{
        "content-type":"application/json;charset=UTF-8"
      },
      status:200
    })
  }
}

/**------【④. Stripping the cocoons, extracting common business methods】-----**/

//Access the management background or private blog, then perform Base Auth
function parseBasicAuth(request){
    const auth=request.headers.get("Authorization");
    if(!auth||!/^Basic [A-Za-z0-9._~+/-]+=*$/i.test(auth)){
        const token = request.headers.get("cfblog_token");
        if(token){
            //Get URL request object
            let url=new URL(request.url)
            let paths=url.pathname.trim("/").split("/")

            //Verify permissions
            if("admin"==paths[0] && ("search.xml"==paths[1]||"sitemap.xml"==paths[1])){
                return token === ACCOUNT.third_token
            }
        }
        return false;
    }
    const[user,pwd]=atob(auth.split(" ").pop()).split(":");
    console.log("-----parseBasicAuth----- ", user, pwd)
    return user===ACCOUNT.user && pwd===ACCOUNT.password
}

//Get all [public] articles: For front desk use only
async function getArticlesList(){
  let articles_all = await getAllArticlesList();

  for(var i=0;i<articles_all.length;i++)
    if(articles_all[i].hidden){
        articles_all.splice(i,1);
    }
  return articles_all;
}

//Sort articles: first inverted by id, then inverted by top time
function sortArticle(articles){
  return sort(sort(articles,'id'),'top_timestamp');
}

//Get a list of recent articles
async function getRecentlyArticles(articles){
  if(!articles){
    articles = await getArticlesList();
  }
  if(OPT.recentlyType == 2){//Reverse order by modification time
    articles = sort([].concat(articles),'modify_timestamp');
  }
  let articles_recently = articles.slice(0,OPT.recentlySize);

  for(var i=0;i<articles_recently.length;i++){
      //Adjust the date (yyyy-MM-dd) and url of the article
      if(articles_recently[i].top_timestamp && !articles_recently[i].title.startsWith(OPT.top_flag)){
        articles_recently[i].title = OPT.top_flag + articles_recently[i].title
      }
      articles_recently[i].createDate10=articles_recently[i].createDate.substr(0,10),
      articles_recently[i].url="/article/"+articles_recently[i].id+"/"+articles_recently[i].link+".html";
  }
  return articles_recently;
}

//Process the attribute information of the article: date (yyyy-MM-dd), year, month, day, content length and url
function processArticleProp(articles){
    for(var i=0;i<articles.length;i++){
        //Adjust the date of the article (yyyy-MM-dd), article length and url
        if(articles[i]){
            if(articles[i].top_timestamp && !articles[i].title.startsWith(OPT.top_flag)){
              articles[i].title = OPT.top_flag + articles[i].title
            }
            //Adjust the date (yyyy-MM-dd), year, month, day, content length and url of the article
            articles[i].createDate10=articles[i].createDate.substr(0,10),
            articles[i].createDateYear=articles[i].createDate.substr(0,4),
            articles[i].createDateMonth=articles[i].createDate.substr(5,7),
            articles[i].createDateDay=articles[i].createDate.substr(8,10),
            articles[i].contentLength=articles[i].contentText.length,
            articles[i].url="/article/"+articles[i].id+"/"+articles[i].link+".html";
        }
    }
}

//Get the front-end template source code, template_path: the relative path of the template
async function getThemeHtml(template_path){
  template_path=template_path.replace(".html","")
  let html = await (await fetch(OPT.themeURL+template_path+".html",{cf:{cacheTtl:600}})).text();

  //Start with the background editing page
  if("admin/index|admin/editor".includes(template_path)){
      html = html.replace("$('#WidgetCategory').val(JSON.stringify(categoryJson))",OPT.editor_page_scripts+"$('#WidgetCategory').val(JSON.stringify(categoryJson))")
  }

  return html
}

//According to the article id, return to the previous and next article, which will be used at the bottom of the article content page
async function getSiblingArticle(id){
    id=("00000"+parseInt(id)).substr(-6);
    //Read the article list and find the article with the specified id
    let articles_all=await getArticlesList(),
        article_idx=-1;
    for(var i=0,len=articles_all.length;i<len;i++)
      if(articles_all[i].id==id){
          article_idx=i;
          break
      }
    let value=await getArticle(id);
    return null==value||0===value.length?[void 0,void 0,void 0]:[articles_all[article_idx-1],value,articles_all[article_idx+1]]
}

//clear cache
async function purge(cacheZoneId=ACCOUNT.cacheZoneId,cacheToken=ACCOUNT.cacheToken){
    if(null==cacheZoneId||null==cacheToken||cacheZoneId.length<5||cacheToken.length<5){
        return false;
    }
    let ret=await fetch(`https://api.cloudflare.com/client/v4/zones/${cacheZoneId}/purge_cache`,{
        method:"POST",
        headers:{
            "Authorization":"Bearer "+cacheToken,
            "Content-Type":"application/json"
        },
        body:'{"purge_everything":true}'
    });
    return (await ret.json()).success
}

// Pagination loading of background article list page, return [article list, whether there is no next page]
async function admin_nextPage(pageNo,pageSize=OPT.pageSize){
    pageNo=pageNo<=1?1:pageNo;
    let articles_all=await getAllArticlesList(),
        articles=[];
    for(var i=(pageNo-1)*pageSize,s=Math.min(pageNo*pageSize,articles_all.length);i<s;i++){
      if(articles_all[i].top_timestamp && !articles_all[i].title.startsWith(OPT.top_flag)){
        articles_all[i].title = OPT.top_flag + articles_all[i].title
      }
      if(articles_all[i].hidden && !articles_all[i].title.startsWith(OPT.hidden_flag)){
        articles_all[i].title = OPT.hidden_flag + articles_all[i].title
      }
      articles.push(articles_all[i]);
    }
    //articles=sortArticle(articles);
    return articles
}

//Parse the parameters of the background request
async function parseReq(request){
    const content_type=request.headers.get("content-type")||"";
    //json format
    if(content_type.includes("application/json")){
    let json=JSON.stringify(await request.json()),
        content_type=JSON.parse(json),
        settings={category:[],top_timestamp:0, hidden:0};
        for(var i=0;i<content_type.length;i++){
            if("tags"==content_type[i].name){//tags, separated by commas
                settings[content_type[i].name]=content_type[i].value.split(",")
            }else if(content_type[i].name.includes("category")){
                settings.category.push(content_type[i].value)
            }else{
                settings[content_type[i].name]=content_type[i].value
            }
        }
        return settings
    }
    if(content_type.includes("application/text")){
        return await request.text();
    }
    if(content_type.includes("text/html")){
        return await request.text();
    }
    if(content_type.includes("form")){
        const formData=await request.formData(),
                ret={};
        for(const field of formData.entries())
            ret[field[0]]=field[1];
        return JSON.stringify(ret)
    }
    {
        const blob=await request.blob();
        return URL.createObjectURL(blob)
    }
}

//Assign an ID to the article
async function generateId(){
    //The number of articles read in KV (initialized to 1), and formatted as 6 digits, and zeros are added in front of less than 6 digits
    let article_id_seq=await getIndexNum();
    if(""===article_id_seq||null===article_id_seq||"[]"===article_id_seq||void 0===article_id_seq){
        await saveIndexNum(1)
        return "000001"
    }else{
        await saveIndexNum(parseInt(article_id_seq)+1)
        return ("00000"+(parseInt(article_id_seq)+1)).substr(-6)
    }
}

/**------【⑤. Specializing in the art industry, reading and writing KV method set】-----**/

/* [Meaning of KV Key]
  SYSTEM_INDEX_LIST list of articles (not including content)
  SYSTEM_INDEX_NUM The serial number of the latest article (when the article is not deleted, it is equal to the number of articles)
  SYSTEM_VALUE_WidgetMenu navigation bar
  SYSTEM_VALUE_WidgetCategory category
  SYSTEM_VALUE_WidgetTags tag
  SYSTEM_VALUE_WidgetLink link
*/

//KV read, whether toJson is converted to json, the default is false
async function getKV(key, toJson=false){
  console.log("------------KV read------------key,toJson:", key, toJson);
  let value=await CFBLOG.get(key);
  if(!toJson)
    return null==value?"[]":value;
  try{
    return null==value?[]:JSON.parse(value)
  }catch(e){
    return[]
  }
}
//KV read, get all articles (including public + hidden): only used in the background
async function getAllArticlesList(){
  return await getKV("SYSTEM_INDEX_LIST", true);
}
//KV read, the latest article serial number (when the article is not deleted, it is equal to the number of articles), used to calculate the next article id
async function getIndexNum(){
  return await getKV("SYSTEM_INDEX_NUM", true);
}
//KV read, get the navigation bar
async function getWidgetMenu(){
  return await getKV("SYSTEM_VALUE_WidgetMenu", true);
}
//KV read, get category catalog
async function getWidgetCategory(){
  return await getKV("SYSTEM_VALUE_WidgetCategory", true);
}
//KV read, get label
async function getWidgetTags(){
  return await getKV("SYSTEM_VALUE_WidgetTags", true);
}
//KV read, get link
async function getWidgetLink(){
  return await getKV("SYSTEM_VALUE_WidgetLink", true);
}
//KV read, get article details
async function getArticle(id){
  return await getKV(id, true);
}

//Write KV, if the value is not an object type (array or json object), it needs to be serialized to a string
async function saveKV(key,value){
    if(null!=value){
        if("object"==typeof value){
            value=JSON.stringify(value)
        }
        await CFBLOG.put(key,value)
        return true
    }
    return false;
}

//Write into KV, get all articles (including public + hidden): only used in the background
async function saveArticlesList(value){
  return await saveKV("SYSTEM_INDEX_LIST",value);
}
//Write into KV, the serial number of the latest article (when the article is not deleted, it is equal to the number of articles), used to calculate the next article id
async function saveIndexNum(value){
  return await saveKV("SYSTEM_INDEX_NUM", value);
}
//Write KV, get the navigation bar
async function saveWidgetMenu(value){
  return await saveKV("SYSTEM_VALUE_WidgetMenu", value);
}
//Write into KV, get category catalog
async function saveWidgetCategory(value){
  return await saveKV("SYSTEM_VALUE_WidgetCategory", value);
}
//Write KV, get label
async function saveWidgetTags(value){
  return await saveKV("SYSTEM_VALUE_WidgetTags", value);
}
//Write KV, get the link
async function saveWidgetLink(value){
  return await saveKV("SYSTEM_VALUE_WidgetLink", value);
}
//Write KV to get detailed information about the article
async function saveArticle(id,value){
  return await saveKV(id, value);
}

/**------【⑥. Standing on the shoulders of giants, basic methods】-----**/

//Method of extending String:
//trim clear the spaces before and after
String.prototype.trim=function(t){
  return t?this.replace(new RegExp("^\\"+t+"+|\\"+t+"+$","g"),""):this.replace(/^\s+|\s+ $/g,"")
}
//replaceHtmlPara replace<!--{parameters}-->
String.prototype.replaceHtmlPara=function(t,e){
  return null!=e&&(e=e.replace(new RegExp("[$]","g"),"$$$$")),this.replace(new RegExp("\x3c!--{" +t+"}--\x3e","g"),e)
}
//replaceAll replace all
String.prototype.replaceAll=function(t,e){
  return this.replace(new RegExp(t,"g"),e)
}

//Less than 2 digits, add 0 in front
function pad(t){
    return t>=0&&t<=9?"0"+t:t
}

//Sort (default reverse order)
function sort(arr, field, desc=true){
    return arr.sort((function(m,n){
        var a=m[field]||'0',
            b=n[field]||'0';
        return desc?(a>b?-1:(a<b?1:0)):(a<b?-1:(a>b?1:0))
    }))
}

//undefined to empty string
function nullToEmpty(k){
  return k==undefined?'':k
}

//Judgment format: whether the string is json, or whether the parameter is an object
function checkFormat(t){
    if("string"==typeof t){
        try{
            var e=JSON.parse(t);
            return !("object"!=typeof e||!e)
        }catch(t){
            return false
        }
    }
    return !("object"!=typeof t||!t)
}

//Introducing mustache.js, 4.1.0: https://cdn.bootcdn.net/ajax/libs/mustache.js/4.1.0/mustache.min.js

(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.Mustache=factory())})(this,function(){"use strict";var objectToString=Object.prototype.toString;var isArray=Array.isArray||function isArrayPolyfill(object){return objectToString.call(object)==="[object Array]"};function isFunction(object){return typeof object==="function"}function typeStr(obj){return isArray(obj)?"array":typeof obj}function escapeRegExp(string){return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function hasProperty(obj,propName){return obj!=null&&typeof obj==="object"&&propName in obj}function primitiveHasOwnProperty(primitive,propName){return primitive!=null&&typeof primitive!=="object"&&primitive.hasOwnProperty&&primitive.hasOwnProperty(propName)}var regExpTest=RegExp.prototype.test;function testRegExp(re,string){return regExpTest.call(re,string)}var nonSpaceRe=/\S/;function isWhitespace(string){return!testRegExp(nonSpaceRe,string)}var entityMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};function escapeHtml(string){return String(string).replace(/[&<>"'`=\/]/g,function fromEntityMap(s){return entityMap[s]})}var whiteRe=/\s*/;var spaceRe=/\s+/;var equalsRe=/\s*=/;var curlyRe=/\s*\}/;var tagRe=/#|\^|\/|>|\{|&|=|!/;function parseTemplate(template,tags){if(!template)return[];var lineHasNonSpace=false;var sections=[];var tokens=[];var spaces=[];var hasTag=false;var nonSpace=false;var indentation="";var tagIndex=0;function stripSpace(){if(hasTag&&!nonSpace){while(spaces.length)delete tokens[spaces.pop()]}else{spaces=[]}hasTag=false;nonSpace=false}var openingTagRe,closingTagRe,closingCurlyRe;function compileTags(tagsToCompile){if(typeof tagsToCompile==="string")tagsToCompile=tagsToCompile.split(spaceRe,2);if(!isArray(tagsToCompile)||tagsToCompile.length!==2)throw new Error("Invalid tags: "+tagsToCompile);openingTagRe=new RegExp(escapeRegExp(tagsToCompile[0])+"\\s*");closingTagRe=new RegExp("\\s*"+escapeRegExp(tagsToCompile[1]));closingCurlyRe=new RegExp("\\s*"+escapeRegExp("}"+tagsToCompile[1]))}compileTags(tags||mustache.tags);var scanner=new Scanner(template);var start,type,value,chr,token,openSection;while(!scanner.eos()){start=scanner.pos;value=scanner.scanUntil(openingTagRe);if(value){for(var i=0,valueLength=value.length;i<valueLength;++i){chr=value.charAt(i);if(isWhitespace(chr)){spaces.push(tokens.length);indentation+=chr}else{nonSpace=true;lineHasNonSpace=true;indentation+=" "}tokens.push(["text",chr,start,start+1]);start+=1;if(chr==="\n"){stripSpace();indentation="";tagIndex=0;lineHasNonSpace=false}}}if(!scanner.scan(openingTagRe))break;hasTag=true;type=scanner.scan(tagRe)||"name";scanner.scan(whiteRe);if(type==="="){value=scanner.scanUntil(equalsRe);scanner.scan(equalsRe);scanner.scanUntil(closingTagRe)}else if(type==="{"){value=scanner.scanUntil(closingCurlyRe);scanner.scan(curlyRe);scanner.scanUntil(closingTagRe);type="&"}else{value=scanner.scanUntil(closingTagRe)}if(!scanner.scan(closingTagRe))throw new Error("Unclosed tag at "+scanner.pos);if(type==">"){token=[type,value,start,scanner.pos,indentation,tagIndex,lineHasNonSpace]}else{token=[type,value,start,scanner.pos]}tagIndex++;tokens.push(token);if(type==="#"||type==="^"){sections.push(token)}else if(type==="/"){openSection=sections.pop();if(!openSection)throw new Error('Unopened section "'+value+'" at '+start);if(openSection[1]!==value)throw new Error('Unclosed section "'+openSection[1]+'" at '+start)}else if(type==="name"||type==="{"||type==="&"){nonSpace=true}else if(type==="="){compileTags(value)}}stripSpace();openSection=sections.pop();if(openSection)throw new Error('Unclosed section "'+openSection[1]+'" at '+scanner.pos);return nestTokens(squashTokens(tokens))}function squashTokens(tokens){var squashedTokens=[];var token,lastToken;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];if(token){if(token[0]==="text"&&lastToken&&lastToken[0]==="text"){lastToken[1]+=token[1];lastToken[3]=token[3]}else{squashedTokens.push(token);lastToken=token}}}return squashedTokens}function nestTokens(tokens){var nestedTokens=[];var collector=nestedTokens;var sections=[];var token,section;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];switch(token[0]){case"#":case"^":collector.push(token);sections.push(token);collector=token[4]=[];break;case"/":section=sections.pop();section[5]=token[2];collector=sections.length>0?sections[sections.length-1][4]:nestedTokens;break;default:collector.push(token)}}return nestedTokens}function Scanner(string){this.string=string;this.tail=string;this.pos=0}Scanner.prototype.eos=function eos(){return this.tail===""};Scanner.prototype.scan=function scan(re){var match=this.tail.match(re);if(!match||match.index!==0)return"";var string=match[0];this.tail=this.tail.substring(string.length);this.pos+=string.length;return string};Scanner.prototype.scanUntil=function scanUntil(re){var index=this.tail.search(re),match;switch(index){case-1:match=this.tail;this.tail="";break;case 0:match="";break;default:match=this.tail.substring(0,index);this.tail=this.tail.substring(index)}this.pos+=match.length;return match};function Context(view,parentContext){this.view=view;this.cache={".":this.view};this.parent=parentContext}Context.prototype.push=function push(view){return new Context(view,this)};Context.prototype.lookup=function lookup(name){var cache=this.cache;var value;if(cache.hasOwnProperty(name)){value=cache[name]}else{var context=this,intermediateValue,names,index,lookupHit=false;while(context){if(name.indexOf(".")>0){intermediateValue=context.view;names=name.split(".");index=0;while(intermediateValue!=null&&index<names.length){if(index===names.length-1)lookupHit=hasProperty(intermediateValue,names[index])||primitiveHasOwnProperty(intermediateValue,names[index]);intermediateValue=intermediateValue[names[index++]]}}else{intermediateValue=context.view[name];lookupHit=hasProperty(context.view,name)}if(lookupHit){value=intermediateValue;break}context=context.parent}cache[name]=value}if(isFunction(value))value=value.call(this.view);return value};function Writer(){this.templateCache={_cache:{},set:function set(key,value){this._cache[key]=value},get:function get(key){return this._cache[key]},clear:function clear(){this._cache={}}}}Writer.prototype.clearCache=function clearCache(){if(typeof this.templateCache!=="undefined"){this.templateCache.clear()}};Writer.prototype.parse=function parse(template,tags){var cache=this.templateCache;var cacheKey=template+":"+(tags||mustache.tags).join(":");var isCacheEnabled=typeof cache!=="undefined";var tokens=isCacheEnabled?cache.get(cacheKey):undefined;if(tokens==undefined){tokens=parseTemplate(template,tags);isCacheEnabled&&cache.set(cacheKey,tokens)}return tokens};Writer.prototype.render=function render(template,view,partials,config){var tags=this.getConfigTags(config);var tokens=this.parse(template,tags);var context=view instanceof Context?view:new Context(view,undefined);return this.renderTokens(tokens,context,partials,template,config)};Writer.prototype.renderTokens=function renderTokens(tokens,context,partials,originalTemplate,config){var buffer="";var token,symbol,value;for(var i=0,numTokens=tokens.length;i<numTokens;++i){value=undefined;token=tokens[i];symbol=token[0];if(symbol==="#")value=this.renderSection(token,context,partials,originalTemplate,config);else if(symbol==="^")value=this.renderInverted(token,context,partials,originalTemplate,config);else if(symbol===">")value=this.renderPartial(token,context,partials,config);else if(symbol==="&")value=this.unescapedValue(token,context);else if(symbol==="name")value=this.escapedValue(token,context,config);else if(symbol==="text")value=this.rawValue(token);if(value!==undefined)buffer+=value}return buffer};Writer.prototype.renderSection=function renderSection(token,context,partials,originalTemplate,config){var self=this;var buffer="";var value=context.lookup(token[1]);function subRender(template){return self.render(template,context,partials,config)}if(!value)return;if(isArray(value)){for(var j=0,valueLength=value.length;j<valueLength;++j){buffer+=this.renderTokens(token[4],context.push(value[j]),partials,originalTemplate,config)}}else if(typeof value==="object"||typeof value==="string"||typeof value==="number"){buffer+=this.renderTokens(token[4],context.push(value),partials,originalTemplate,config)}else if(isFunction(value)){if(typeof originalTemplate!=="string")throw new Error("Cannot use higher-order sections without the original template");value=value.call(context.view,originalTemplate.slice(token[3],token[5]),subRender);if(value!=null)buffer+=value}else{buffer+=this.renderTokens(token[4],context,partials,originalTemplate,config)}return buffer};Writer.prototype.renderInverted=function renderInverted(token,context,partials,originalTemplate,config){var value=context.lookup(token[1]);if(!value||isArray(value)&&value.length===0)return this.renderTokens(token[4],context,partials,originalTemplate,config)};Writer.prototype.indentPartial=function indentPartial(partial,indentation,lineHasNonSpace){var filteredIndentation=indentation.replace(/[^ \t]/g,"");var partialByNl=partial.split("\n");for(var i=0;i<partialByNl.length;i++){if(partialByNl[i].length&&(i>0||!lineHasNonSpace)){partialByNl[i]=filteredIndentation+partialByNl[i]}}return partialByNl.join("\n")};Writer.prototype.renderPartial=function renderPartial(token,context,partials,config){if(!partials)return;var tags=this.getConfigTags(config);var value=isFunction(partials)?partials(token[1]):partials[token[1]];if(value!=null){var lineHasNonSpace=token[6];var tagIndex=token[5];var indentation=token[4];var indentedValue=value;if(tagIndex==0&&indentation){indentedValue=this.indentPartial(value,indentation,lineHasNonSpace)}var tokens=this.parse(indentedValue,tags);return this.renderTokens(tokens,context,partials,indentedValue,config)}};Writer.prototype.unescapedValue=function unescapedValue(token,context){var value=context.lookup(token[1]);if(value!=null)return value};Writer.prototype.escapedValue=function escapedValue(token,context,config){var escape=this.getConfigEscape(config)||mustache.escape;var value=context.lookup(token[1]);if(value!=null)return typeof value==="number"&&escape===mustache.escape?String(value):escape(value)};Writer.prototype.rawValue=function rawValue(token){return token[1]};Writer.prototype.getConfigTags=function getConfigTags(config){if(isArray(config)){return config}else if(config&&typeof config==="object"){return config.tags}else{return undefined}};Writer.prototype.getConfigEscape=function getConfigEscape(config){if(config&&typeof config==="object"&&!isArray(config)){return config.escape}else{return undefined}};var mustache={name:"mustache.js",version:"4.1.0",tags:["{{","}}"],clearCache:undefined,escape:undefined,parse:undefined,render:undefined,Scanner:undefined,Context:undefined,Writer:undefined,set templateCache(cache){defaultWriter.templateCache=cache},get templateCache(){return defaultWriter.templateCache}};var defaultWriter=new Writer;mustache.clearCache=function clearCache(){return defaultWriter.clearCache()};mustache.parse=function parse(template,tags){return defaultWriter.parse(template,tags)};mustache.render=function render(template,view,partials,config){if(typeof template!=="string"){throw new TypeError('Invalid template! Template should be a "string" '+'but "'+typeStr(template)+'" was given as the first '+"argument for mustache#render(template, view, partials)")}return defaultWriter.render(template,view,partials,config)};mustache.escape=escapeHtml;mustache.Scanner=Scanner;mustache.Context=Context;mustache.Writer=Writer;return mustache});
